<?xml version="1.0" encoding="UTF-8" ?>
<?component name="input_criteri" macro-uri="comu/input_criteri.zul"?>
<?component name="input_dada" macro-uri="comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="comu/input_etiqueta.zul"?>
<?component name="input_password" macro-uri="comu/input_password.zul"?>

<div id="xmlAgentTop">
	<grid width="99%" id="configurationGrid">
		<attribute name='onCreate'>
		<![CDATA[
		consoleVersion = "2";
		try {
			cl = com.soffid.iam.web.user.UserHandler.class;
			consoleVersion = "3";
		} catch (Exception e) {
		}
		xmlAgentTop.setAttribute("ConsoleVersion", consoleVersion);
	    try {
	    	updateGrid ();
	    	manageAttributesForAuthType ();
	    } catch (Exception e) {
	    	
	    }
		]]>
		</attribute>
		<zscript><![CDATA[
		
			String[] oauthParams = new String[] {
					"grant_type",
       				"client_id",
       				"client_secret",
       				"scope"
       		};
       					
            String[] attributes = new String[] {
         		"proxyHost",
         		"proxyPort"
            };
		    pageScope.put("methodDescriptor", new String[][] {
					new String[] {"Path", "* Path", "url", "Path relative to the agent base URL"},
					new String[] {"Method", "* Method", "text", "Use either GET / POST / PUT / PATCH / DELETE"},
					new String[] {"Encoding", "* Encoding", "text", "Use text/xml or application/json"},
					new String[] {"Template", "XML Template", "", "Use an XML template used to generate the request. Edit the list of templates from the previous tab"},
					new String[] {"Params", "Parameters", "text", "Space separated list of parameters to send. To be ignored with XML templates"},
					new String[] {"SuccessCodes", "Success HTTP Codes", "string", "HTTP codes considered as success (separated by blanks). Usually 200"},
					new String[] {"FailureCodes", "Failure HTTP Codes", "string", "HTTP codes considered as failure (separated by blanks). Usually 500"},
					new String[] {"Results", "Results", "beanshell", "This script will received the parsed response. It must return a list of objects extracted from the result"},
					new String[] {"Next", "Pagination URL", "beanshell", "Script that returns the URL for the next page of results. Use it with simple get requests"},
					new String[] {"Pagination", "Pagination script", "beanshell", "Script that returns true when a new page of results is required. Use it with complex requests"},
					new String[] {"Condition", "Condition script", "beanshell", "Script that returns false when this method should be skipped"},
					new String[] {"Header", "Optional header"},
					new String[] {"Header2", "Optional header"},
					new String[] {"Header3", "Optional header"}
			});

			org.zkoss.zk.ui.event.EventListener editTemplate = new EventListener ()
			{
				public void onEvent(Event ev) {
					row = ev.getTarget().getParent().getParent();
					template = row.getAttribute("template");
					Object editor = edw.getFellow("editor");
					editor.value = template;
					pageScope.put("xmlCurrentRow", row);
		     		edw.doHighlighted();
				}
			};
	
			org.zkoss.zk.ui.event.EventListener removeTemplate = new EventListener ()
			{
				public void onEvent(Event ev) {
					ev.getTarget().getParent().getParent().detach();
					updateBlob();
				}
			};

			void updateGrid () {
				byte[] data = es.caib.zkib.datasource.XPathUtils.getValue( xmlAgentTop ,"blobParam");
				if (data != null)
				{
					String t = new String ( data,"UTF-8"); 
					org.json.JSONTokener tokener = new org.json.JSONTokener( t);
					org.json.JSONObject json = new org.json.JSONObject(tokener);
					org.json.JSONArray templates = json.optJSONArray("templates");
					Grid g = xmlTemplates;
					if (templates != null)
					{
						for ( int i = 0; i < templates.length(); i++)
						{
							org.json.JSONObject s = templates.getJSONObject(i);
							if (s.optString("name") != null && !s.optString("name").isEmpty() &&
								s.optString("template") != null && !s.optString("template").isEmpty())
							{
								Row row = new Row();
								row.setAttribute("template", s.optString("template"));
								g.getRows().appendChild(row);
								Textbox tb = new Textbox();
								tb.setWidth("90%");
								tb.setValue (s.optString("name"));
								row.appendChild(tb);
								Div div = new Div();
								row.appendChild(div);
								consoleVersion = xmlAgentTop.getAttribute("ConsoleVersion");
								es.caib.zkib.zkiblaf.ImageClic ic = new es.caib.zkib.zkiblaf.ImageClic("3".equals(consoleVersion) ? "/img/pencil.svg": "/img/pencil.png"); 
								ic.addEventListener("onClick", editTemplate);
								div.appendChild(ic);
								ic = new es.caib.zkib.zkiblaf.ImageClic("3".equals(consoleVersion) ? "/img/remove.svg": "~./img/list-remove.gif");
								ic.addEventListener("onClick", removeTemplate);
								div.appendChild(ic);
							}
						}
					}
					
					org.json.JSONArray oauthJson = json.optJSONArray("oauthParams");
					if (oauthJson != null)
					{
						for ( int i = 0; i < oauthJson.length(); i++)
						{
							org.json.JSONObject s = oauthJson.getJSONObject(i);
							if (s.optString("oauthParam")!= null
								&& !s.optString("oauthParam").isEmpty()){
								Component c = configurationGrid.getFellowIfAny(s.optString("oauthParam"));
								if (c != null){
									c.setValue(s.optString("oauthValue"));
								}	
							}
						
						}
					}	
					for (String attribute: attributes) {
						Component c = configurationGrid.getFellowIfAny (attribute);
						if (c != null)
						{
							String v = json.optString(attribute);
							if (c instanceof Listbox)
							{
								c.setSelectedItem(null);
								for ( item: c.getItems()) {
									if (item.getValue() != null && item.getValue().equals(v))
										c.setSelectedItem ( item );
								}
							}
							else
								c.setValue ( v );
						}
					}
				}
		    }

			void updateBlob () {
				byte[] data = es.caib.zkib.datasource.XPathUtils.getValue(xmlAgentTop,"blobParam");
				org.json.JSONObject json;
				if (data != null)
				{
					String t = new String ( data,"UTF-8"); 
					org.json.JSONTokener tokener = new org.json.JSONTokener( t);
					json = new org.json.JSONObject(tokener);
				} else {
					json = new org.json.JSONObject();
				}
				org.json.JSONArray templates = new org.json.JSONArray();
				Grid g = xmlTemplates;
				for ( Component row: g.getRows().getChildren())
				{
					String template = row.getAttribute("template");
					String templateName = row.getFirstChild().getValue();
					org.json.JSONObject ob = new org.json.JSONObject();
					ob.put("template", template);
					ob.put("name", templateName);
					templates.put(ob);
				}
				json.put("templates", templates); 

				for ( String attribute: attributes)
				{
					Component item = configurationGrid.getFellow (attribute);
					String v = null;
					if (item instanceof Listbox)
					{
						if (item.getSelectedItem() != null)
							v = item.getSelectedItem().getValue();
					}
					else
						v = item.getValue();
					if ( v != null)
						json.put(attribute, v);
				}

				String t = json.toString();
				es.caib.zkib.datasource.XPathUtils.setValue(self,"blobParam", t.getBytes("UTF-8"));
			}
			
			void updateOAuthParams(){
				byte[] data = es.caib.zkib.datasource.XPathUtils.getValue(xmlAgentTop,"blobParam");
				org.json.JSONObject json;
				
				if (data != null)
				{
					String t = new String ( data,"UTF-8"); 
					org.json.JSONTokener tokener = new org.json.JSONTokener( t);
					json = new org.json.JSONObject(tokener);
				} else {
					json = new org.json.JSONObject();
				}
				
				String grantType;
				Component authMethod = configurationGrid.getFellow("authMethod");
				if("tokenOAuthCC".equals(authMethod.getSelectedItem().getValue())){
					grantType = "client_credentials";
				}
				if("tokenOAuthPG".equals(authMethod.getSelectedItem().getValue())){
					grantType = "password";
				}
				
				org.json.JSONArray oauthJson = new org.json.JSONArray();
				if (oauthParams != null){
					for ( String attribute: oauthParams)
					{
						if (attribute.equals("grant_type")){
							org.json.JSONObject ob = new org.json.JSONObject();
							ob.put("oauthParam", attribute);
							ob.put("oauthValue", grantType);
							oauthJson.put(ob);
						} else {
							Component item = configurationGrid.getFellow(attribute);
							String value = item.getValue();
							if ( value != null) {
							    org.json.JSONObject ob = new org.json.JSONObject();
								ob.put("oauthParam", attribute);
								ob.put("oauthValue", value);
								oauthJson.put(ob);
							}
						}
					}
					json.put("oauthParams", oauthJson);
				}
				
				String t = json.toString();
				es.caib.zkib.datasource.XPathUtils.setValue(self,"blobParam", t.getBytes("UTF-8"));
			}
			
			void newTemplate() {
				Grid g = xmlTemplates;
				Row row = new Row();
				row.setAttribute("template", "<?xml version='1.0' encoding='UTF-8'?>\n"+
					"<xsl:stylesheet version='1.0'\n"+
					"  xmlns:xsl='http://www.w3.org/1999/XSL/Transform'>\n"+
					"    <xsl:template match='/request'>\n"+
					"      <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>\n"+
					"        <soapenv:Header/>\n"+
					"        <soapenv:Body>\n"+
					"           <wsdl:actualRequest xmlns:wsdl='http://iam.soffid.com/wsdl'>\n"+
					"             <value-of select='param1'/>\n"+
					"           </wsdl:actualRequest>\n"+
					"        </soapenv:Body>\n"+
					"      </soapenv:Envelope>\n"+
					"    </xsl:template>\n"+
					"</xsl:stylesheet>");
				g.getRows().appendChild(row);
				Textbox tb = new Textbox();
				tb.setAttribute("onChange", "updateBlob()");
				tb.setWidth("90%");
				tb.setValue ("");
				tb.focus();
				row.appendChild(tb);
				Div div = new Div();
				row.appendChild(div);
				consoleVersion = xmlAgentTop.getAttribute("ConsoleVersion");
				es.caib.zkib.zkiblaf.ImageClic ic = new es.caib.zkib.zkiblaf.ImageClic("3".equals(consoleVersion) ? "/img/pencil.svg": "/img/pencil.png"); 
				ic.addEventListener("onClick", editTemplate);
				div.appendChild (ic);
				ic = new es.caib.zkib.zkiblaf.ImageClic("3".equals(consoleVersion) ? "/img/remove.svg": "~./img/list-remove.gif");
				ic.addEventListener("onClick", removeTemplate);
				div.appendChild (ic);
			}
			
			void manageAttributesForAuthType() {
				Component authMethod = configurationGrid.getFellow("authMethod");
				if (authMethod.getSelectedItem() == null) {
					userRow.setVisible(true);
					passRow.setVisible(true);
					authURLRow.setVisible(true);
					tokenAttributeRow.setVisible(true);
					oauthRow.setVisible(false);
					tokenRow.setVisible(false);
				} else if ("".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(false);
					passRow.setVisible(false);
					authURLRow.setVisible(false);
					tokenAttributeRow.setVisible(false);
					oauthRow.setVisible(false);
					tokenRow.setVisible(false);
				} else if ("basic".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(true);
					passRow.setVisible(true);
					authURLRow.setVisible(false);
					tokenAttributeRow.setVisible(false);
					oauthRow.setVisible(false);
					tokenRow.setVisible(false);
				} else if ("token".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(true);
					passRow.setVisible(true);
					authURLRow.setVisible(true);
					tokenAttributeRow.setVisible(false);
					oauthRow.setVisible(false);
					tokenRow.setVisible(false);
				} else if ("bearer".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(false);
					passRow.setVisible(false);
					authURLRow.setVisible(false);
					tokenAttributeRow.setVisible(false);
					oauthRow.setVisible(false);
					tokenRow.setVisible(true);
				} else if ("tokenOAuthCC".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(false);
					passRow.setVisible(false);
					authURLRow.setVisible(true);
					tokenAttributeRow.setVisible(true);
					oauthRow.setVisible(true);
					tokenRow.setVisible(false);
				} else if ("tokenOAuthPG".equals(authMethod.getSelectedItem().getValue())) {
					userRow.setVisible(true);
					passRow.setVisible(true);
					authURLRow.setVisible(true);
					tokenAttributeRow.setVisible(true);
					oauthRow.setVisible(true);
					tokenRow.setVisible(false);
				}
			}
		]]>
		</zscript>
		<columns visible="false"><column width="14%"/><column/> </columns>
		<rows>
			<row>
				<input_etiqueta value="Server URL" />
				<hbox width="90%">
					<input_dada bind="@param4" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row id="userRow">
				<input_etiqueta value="User name" />
				<hbox width="90%">
					<input_dada bind="@param0" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row id="passRow">
				<input_etiqueta value="Password" />
				<hbox width="90%">
					<input_password bind="@param1" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row>
				<input_etiqueta value="Authentication method" />
				<listbox id="authMethod" bind="@param2" mold="select"  disabled="{!canModifyAgent}" width="400px">
					<attribute name="onSelect">
					<![CDATA[
						manageAttributesForAuthType();
					]]>
					</attribute>
					<attribute name="onCreate">
					<![CDATA[
						manageAttributesForAuthType();
					]]>
					</attribute>
					<listitem value="">
						<listcell label="None"/>
					</listitem>
					<listitem value="basic">
						<listcell label="Basic"/>
					</listitem>
					<listitem value="bearer">
						<listcell label="Bearer token"/>
					</listitem>
					<listitem value="token">
						<listcell label="Token"/>
					</listitem>
					<listitem value="tokenOAuthCC">
						<listcell label="Token OAuth Client Credentials"/>
					</listitem>
					<listitem value="tokenOAuthPG">
						<listcell label="Token OAuth Password Grant"/>
					</listitem>					
				</listbox>
			</row>
			<row id="authURLRow">
				<input_etiqueta value="Authentication URL" />
				<hbox width="90%">
					<input_dada bind="@param3" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row id="tokenRow">
				<input_etiqueta value="Bearer token" />
				<hbox width="90%">
					<input_dada bind="@param0" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row id="tokenAttributeRow">
				<input_etiqueta value="Token attr. output" />
				<hbox width="90%">
					<input_dada bind="@param7" lectura="${!canModifyAgent}"
						width_custom="98%" />
				</hbox>
			</row>
			<row id="oauthRow">
				<input_etiqueta value="Request parameters" />
				<grid>
					<columns visible="false"><column width="14%"/><column/> </columns>
					<rows>
						<row>
							<input_etiqueta value="Client ID" />
							<hbox width="90%">
								<textbox width="96%" id="client_id" onChange='updateOAuthParams()'/>
							</hbox>
						</row>
						<row>
							<input_etiqueta value="Client secret" />
							<hbox width="90%">
								<textbox width="96%" id="client_secret" onChange='updateOAuthParams()'/>
							</hbox>
						</row>					
						<row>
							<input_etiqueta value="Scope" />
							<hbox width="90%">
								<textbox width="96%" id="scope" onChange='updateOAuthParams()'/>
							</hbox>
						</row>												
					</rows>
				</grid>
			</row>
			<row>
				<input_etiqueta value="Enable debug" />
				<listbox bind="@param8" mold="select"  disabled="{!canModifyAgent}" width="100px">
					<listitem value="false">
						<listcell label="No"/>
					</listitem>
					<listitem value="true">
						<listcell label="Yes"/>
					</listitem>
				</listbox>
			</row>
			<row >
				<input_etiqueta value="Proxy host" />
				<hbox width="90%">
					<textbox width="98%" id="proxyHost" onChange="updateBlob()"/>
				</hbox>
			</row>
			<row>
				<input_etiqueta value="Proxy port" />
				<hbox width="90%">
					<textbox width="98%" id="proxyPort" onChange="updateBlob()"/>
				</hbox>
			</row>
			<row>
				<input_etiqueta value="XML Templates" />
				<grid id="xmlTemplates">
					<columns>
						<column label="name" width="*"></column>
						<column label=" " width="80px"></column>
					</columns>
					<rows></rows>
				</grid>
				<button label="New template" onClick="newTemplate()">
				</button>
			</row>
		</rows>
	</grid>
	<window closable="true" id="edw" position="center, center" onCancel="" title="${c:l('editorJS.Titol')}" visible="false" width="90%">
		<attribute name="onClose">
			event.stopPropagation ();
			edw.setVisible(false);
		</attribute>

		<codemirror value="" id="editor" linenumbers="true"
		height="40em"
		language="xml"
		width="100%"/>

		<separator spacing="5px"/>
		<div align="right">
			<button id="finishButton" label="${c:l('editorJS.zul.Accepta')}">
				<attribute name="onClick"><![CDATA[
					Row r = pageScope.get("xmlCurrentRow");
					r.setAttribute("template", self.getFellow("editor").getValue());
					updateBlob();
					edw.setVisible(false);
				]]>
				</attribute>
			</button>
			<button label="${c:l('editorJS.zul.Cancel·la')}" onClick="edw.setVisible(false)"/>
		</div>								
	</window>
</div>